<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_universal_dg.enrichmentDemoUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>enrichmentDemoUtils</name>
        <script><![CDATA[var enrichmentDemoUtils = Class.create();
enrichmentDemoUtils.prototype = {
	initialize: function() {
	},
	
	sightingsSearch: function(observable_ids,query){
	//	gs.info("[UDG] Info observables: "+observable_ids);
	//	gs.info("[UDG] Info query: "+query);
		var observablejSon=JSON.parse(observable_ids);
		var queryjSon=JSON.parse(query);
		var response = {
			"source": "Universal Demo Generator",
			
			"query": {
				"link_url": "http://universaldemogenerator.online/search=${query}",
				"start_date": 0,
				"end_date": 0,
				"max_rows": "1000"
			},
			"results": []
		};
		response.query.text=""+queryjSon.text;
		response.query.configurationId=""+queryjSon.configurationId;
		response.results=[];
		
		for (var j in observablejSon){
			var conditionGr = new GlideRecord("x_snc_universal_dg_sighting_search");
			conditionGr.addQuery("observable_value",observablejSon[j].value);
			conditionGr.addQuery("active","true");
			conditionGr.query();
			if (conditionGr.getRowCount()==0){ //find condition (noththing found)
				conditionGr.initialize();
				conditionGr.addQuery("observable_value","");
				conditionGr.addQuery("active","true");
				conditionGr.query();
				if (conditionGr.getRowCount()==0){ //find default condition (noththing found)
					return null;
				}
			}
			conditionGr.next();
			if (conditionGr.getRowCount()>1){
				gs.warn("[UDG] Warning multiple reponses are defined for single observable! Using: "+conditionGr.short_description);
			}
			
			response.results.push({"observable":{},"sightings":{}});
			response.results[j].observable['value']=observablejSon[j].value;
			response.results[j].observable['type']=observablejSon[j].type;
			response.results[j].observable['valueLower']=observablejSon[j].type.toLowerCase();
			
			//response.results[j].sightings={};
			if (conditionGr.sighting_count==""){
				response.results[j].sightings.count=Math.floor(Math.random() * 10) + 1;
			}
			else{
				response.results[j].sightings.count=parseInt(conditionGr.sighting_count);
			}
			
			var occurrences=this.isValidjSon(conditionGr.sightings_over_time);
			if(!occurrences){
				occurrences="";
			}
			response.results[j].sightings.occurrences=occurrences;
			
			var rwData=this.isValidjSon(conditionGr.raw_data);
			if(!rwData){
				rwData={count:0};
			}
			response.results[j].sightings.raw_data=rwData;
			delete conditionGr;
		  }
		gs.info("[UDG] ss result: "+JSON.stringify(response));
		return JSON.stringify(response);

	},
	
	isValidjSon: function(str) {
			var ret;
			try {
				ret=JSON.parse(str);
			} catch (e) {
				return false;
			}
			return ret;
		},
	type: 'enrichmentDemoUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>martin.meduna</sys_created_by>
        <sys_created_on>2018-08-19 10:37:55</sys_created_on>
        <sys_id>18c8f24d0f04230095d741fce1050e61</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>enrichmentDemoUtils</sys_name>
        <sys_package display_value="Universal Demo Generator" source="x_snc_universal_dg">c0b9f17c37042300b3ac079754990ee9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Universal Demo Generator">c0b9f17c37042300b3ac079754990ee9</sys_scope>
        <sys_update_name>sys_script_include_18c8f24d0f04230095d741fce1050e61</sys_update_name>
        <sys_updated_by>martin.meduna</sys_updated_by>
        <sys_updated_on>2018-09-05 20:13:32</sys_updated_on>
    </sys_script_include>
</record_update>
